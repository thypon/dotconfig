#!/usr/bin/env ruby

require 'git'
require 'logger'
require 'ostruct'
require 'progressbar'
require 'optparse'

class MovingAvarage
	def initialize(elems = 100)
		@elems = elems
		@queue = Array.new
	end

	def add(elem)
		@queue << elem
		@queue.shift if @queue.size > @elems
		self
	end

	def get
		size = @queue.size
		return 0 if size == 0
		@queue.inject{ |sum, el| sum + el }.to_f / size
	end

	def reset
		@queue = Array.new
	end
end

options = {
	workdir: ENV['PWD'],
	b: nil,
	c: nil,
	verbose: false,
	threshold: 30,
	ma: 100,
	csv: nil,
	pry: nil
}
OptionParser.new do |opts|
	opts.on("-wWORKDIR", "--workdir=WORKDIR", "Workdir") do |w|
		options[:workdir] = w
	end
	opts.on("-bBRANCH_B", "--branch-b=BRANCH_B", "Branch A") do |b|
		options[:b] = b
	end
	opts.on("-aBRANCH_A", "--branch-a=BRANCH_A", "Branch B") do |a|
		options[:a] = a
	end
	opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
		options[:verbose] = v
	end
	opts.on("-tTRESHOLD", "--treshold=TRESHOLD", "Percentual Stop Treshold (after min is found)") do |t|
		options[:threshold] = t.to_i
	end
	opts.on("-maPARAM", "--moving-avarage=PARAM", "Max elements saved in the moving avarage filter") do |p|
		options[:ma] = p.to_i
	end
	opts.on("-cCSV", "--csv=CSV", "Outputs the result to the given CSV") do |csv|
		options[:csv] = csv
	end
	opts.on("-p", "--[no-]pry", "Start an interactive shell after the result is found") do |v|
		options[:pry] = v
	end
end.parse!

working_dir    = options[:workdir]
branch_a       = options[:a]
branch_b       = options[:b]
git = if options[:verbose]
	Git.open(working_dir, :log => Logger.new(STDOUT))
else
	Git.open(working_dir)
end

b_commits      = []
b_commits << b_curr_commit = git.gcommit(branch_b)
a_last_commit = git.gcommit(branch_a)

pb = ProgressBar.create(:total => nil, :format => "Commits %c: |%B| %a")
while b_curr_commit = b_curr_commit.parent
	pb.increment
	b_commits << b_curr_commit
end
pb.finish

FIXNUM_MAX = (2**(0.size * 8 -2) -1)
b_diff_min = FIXNUM_MAX
b_right_commit = "None"
pb = ProgressBar.create(:total => b_commits.length, :format => "Diffing %c/%C: |%B| %a %e")
ma = MovingAvarage.new(options[:ma])
b_commits.each do |c|
	pb.increment
	diff = git.diff(a_last_commit, c)
	res = diff.insertions + diff.deletions
	if res < b_diff_min
		b_diff_min = res
		b_right_commit = c
		ma.reset
	end

	curr_ma = ma.add(res).get
	break if curr_ma > b_diff_min * (100.0 + options[:threshold])/100 || curr_ma < b_diff_min * (100.0 - options[:threshold])/100

	pb.format = "Diffing %c/%C: |%B| %a %e Min(#{b_diff_min}, #{b_right_commit}) MA(#{curr_ma})"
end
pb.finish

puts "Minimum commit: #{b_right_commit.sha} with #{b_diff_min} diff"

if options[:csv]
	File.open(options[:csv], 'a') { |file| file.write("#{options[:workdir]},#{options[:branch_a]},#{options[:branch_b]},#{b_right_commit.sha},#{b_diff_min} ") }
end

if options[:pry]
	require 'pry'
	binding.pry
end